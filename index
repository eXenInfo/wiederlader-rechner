<!doctype html>
<html lang="de">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Wiederlader Rechner</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = { darkMode: 'class' }
    </script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useMemo, useRef } = React;

        //============== DATEN & KONFIGURATION ==============
        const initialData = {
            bullets: [{ id: "bul-1", hersteller: 'Sierra', bezeichnung: 'MatchKing HPBT', gewicht: '168', durchmesser: '.308', anzahl: '100', preis: '65.00' }, { id: "bul-2", hersteller: 'Hornady', bezeichnung: 'ELD Match', gewicht: '178', durchmesser: '.308', anzahl: '100', preis: '72.50' },],
            cases: [{ id: 'cas-1', hersteller: 'Lapua', bezeichnung: '6.5 Creedmoor LR', anzahl: '100', preis: '195.95' }, { id: 'cas-2', hersteller: 'Starline', bezeichnung: '6.5 Creedmoor LR', anzahl: '50', preis: '46.50' },],
            primers: [{ id: 'pri-1', hersteller: 'CCI', bezeichnung: '200 LR', anzahl: '1000', preis: '129.95' }, { id: 'pri-2', hersteller: 'Federal', bezeichnung: 'GM210M', anzahl: '1000', preis: '145.00' },],
            powders: [{ id: 'pow-1', hersteller: 'Reload Swiss', bezeichnung: 'RS60', gewicht: '1.0', preis: '110.00' }, { id: 'pow-2', hersteller: 'Vihtavuori', bezeichnung: 'N140', gewicht: '1.0', preis: '115.00' },],
            recipes: [],
            calculatorInputs: { powderCharge: '42.5', caseCycles: '5', roundsPerTraining: '30', trainingsPerYear: '10', batchSize: '50' },
            calculatorSelection: { bullet: '', case: '', primer: '', powder: '' }
        };
        const bulletFields = [ { name: 'hersteller', label: 'Hersteller', type: 'text' }, { name: 'artikelnummer', label: 'Artikelnummer', type: 'text' }, { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' }, { name: 'durchmesser', label: 'Durchmesser (Zoll)', type: 'text' }, { name: 'gewicht', label: 'Gewicht (grain)', type: 'number' }, { name: 'anzahl', label: 'Anzahl / Packung', type: 'number' }, { name: 'preis', label: 'Preis / Packung (€)', type: 'number', step: '0.01' }, ];
        const caseFields = [ { name: 'hersteller', label: 'Hersteller', type: 'text' }, { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' }, { name: 'anzahl', label: 'Anzahl / Packung', type: 'number' }, { name: 'preis', label: 'Preis / Packung (€)', type: 'number', step: '0.01' }, ];
        const primerFields = [ { name: 'hersteller', label: 'Hersteller', type: 'text' }, { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' }, { name: 'anzahl', label: 'Anzahl / Packung', type: 'number' }, { name: 'preis', label: 'Preis / Packung (€)', type: 'number', step: '0.01' }, ];
        const powderFields = [ { name: 'hersteller', label: 'Hersteller', type: 'text' }, { name: 'bezeichnung', label: 'Bezeichnung', type: 'text' }, { name: 'gewicht', label: 'Gewicht / Dose (kg)', type: 'number', step: '0.001' }, { name: 'preis', label: 'Preis / Dose (€)', type: 'number', step: '0.01' }, ];

        //============== KOMPONENTEN ==============
        const NavLink = ({ viewName, currentView, setView, icon, text, isSidebarOpen }) => ( <button onClick={() => setView(viewName)} className={`flex items-center w-full px-4 py-3 text-left transition-colors duration-200 rounded-lg ${currentView === viewName ? 'bg-blue-600 text-white shadow-lg' : 'text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700'}`}> <span className="text-xl">{icon}</span> <span className={`ml-3 whitespace-nowrap ${!isSidebarOpen ? 'hidden' : ''}`}>{text}</span> </button> );
        const ReloadingCalculator = ({ appData, onNavigateToComponent, onInputsChange }) => {
            const StatCard = ({ title, value, unit = '' }) => ( <div className="bg-gray-50 dark:bg-gray-700 p-4 rounded-lg shadow-inner"> <p className="text-sm text-gray-500 dark:text-gray-400">{title}</p> <p className="text-xl font-bold">{value} <span className="text-sm font-normal">{unit}</span></p> </div> );
            const InputField = ({ name, label, value, onChange, type = 'text' }) => ( <div> <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">{label}</label> <input type={type} name={name} value={value || ''} onChange={onChange} min="0" step="any" className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm" /> </div> );
            const DisplayComponent = ({ type, label, selectedItem, onNavigateToComponent }) => ( <div> <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">{label}</label> <div className="mt-1 flex rounded-md shadow-sm"> <div className="relative flex-grow min-w-0"> <div className="block w-full rounded-none rounded-l-md border border-r-0 border-gray-300 dark:border-gray-600 bg-gray-50 dark:bg-gray-700 px-3 py-2 text-sm truncate"> {selectedItem ? `${selectedItem.hersteller} ${selectedItem.bezeichnung}` : 'Bitte wählen...'} </div> </div> <button type="button" onClick={() => onNavigateToComponent(type)} className="relative -ml-px inline-flex items-center space-x-2 px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-r-md text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500 flex-shrink-0"> Wählen </button> </div> </div> );
            const { bullets, cases, primers, powders, calculatorInputs, calculatorSelection } = appData;
            const handleInputChange = (e) => { const { name, value } = e.target; const sanitizedValue = value.replace(',', '.'); onInputsChange({ ...calculatorInputs, [name]: sanitizedValue }); };
            const selectedBullet = useMemo(() => bullets.find(b => b.id === calculatorSelection.bullet), [bullets, calculatorSelection.bullet]);
            const selectedCase = useMemo(() => cases.find(c => c.id === calculatorSelection.case), [cases, calculatorSelection.case]);
            const selectedPrimer = useMemo(() => primers.find(p => p.id === calculatorSelection.primer), [primers, calculatorSelection.primer]);
            const selectedPowder = useMemo(() => powders.find(p => p.id === calculatorSelection.powder), [powders, calculatorSelection.powder]);
            const costs = useMemo(() => {
                const powderChargeGr = parseFloat(calculatorInputs.powderCharge) || 0; const caseCycles = parseInt(calculatorInputs.caseCycles, 10) || 1;
                const bulletCost = selectedBullet ? (parseFloat(selectedBullet.preis) || 0) / (parseInt(selectedBullet.anzahl, 10) || 1) : 0;
                const caseCost = selectedCase ? ((parseFloat(selectedCase.preis) || 0) / (parseInt(selectedCase.anzahl, 10) || 1)) / caseCycles : 0;
                const primerCost = selectedPrimer ? (parseFloat(selectedPrimer.preis) || 0) / (parseInt(selectedPrimer.anzahl, 10) || 1) : 0;
                const powderCostPerGrain = selectedPowder ? (parseFloat(selectedPowder.preis) || 0) / ((parseFloat(selectedPowder.gewicht) || 1) * 1000 * 15.4324) : 0;
                const powderCost = powderChargeGr * powderCostPerGrain;
                const totalPerRound = bulletCost + caseCost + primerCost + powderCost;
                return { bulletCost, caseCost, primerCost, powderCost, totalPerRound };
            }, [selectedBullet, selectedCase, selectedPrimer, selectedPowder, calculatorInputs]);
            const consumption = useMemo(() => {
                const roundsPerTraining = parseInt(calculatorInputs.roundsPerTraining, 10) || 0; const trainingsPerYear = parseInt(calculatorInputs.trainingsPerYear, 10) || 0;
                const annualRounds = roundsPerTraining * trainingsPerYear; const powderChargeGr = parseFloat(calculatorInputs.powderCharge) || 0;
                const annualPowderGr = annualRounds * powderChargeGr; const annualPowderKg = annualPowderGr / 15432.4;
                const costPerMonth = (costs.totalPerRound * annualRounds) / 12; const costPerYear = costs.totalPerRound * annualRounds; const costIn5Years = costPerYear * 5;
                return { annualRounds, annualPowderKg, costPerMonth, costPerYear, costIn5Years };
            }, [costs, calculatorInputs]);
            const formatCurrency = (value) => isNaN(value) ? '0,00 €' : value.toLocaleString('de-DE', { style: 'currency', currency: 'EUR' });
            return ( <div className="max-w-7xl mx-auto"> <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-6">Kosten- & Verbrauchskalkulator</h1> <div className="grid grid-cols-1 lg:grid-cols-3 gap-8"> <div className="lg:col-span-1 space-y-6"> <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md"> <h2 className="text-xl font-semibold mb-4">1. Komponenten</h2> <div className="space-y-4"> <DisplayComponent type="bullets" label="Geschoss" selectedItem={selectedBullet} onNavigateToComponent={onNavigateToComponent}/> <DisplayComponent type="cases" label="Hülse" selectedItem={selectedCase} onNavigateToComponent={onNavigateToComponent}/> <DisplayComponent type="primers" label="Zünder" selectedItem={selectedPrimer} onNavigateToComponent={onNavigateToComponent}/> <DisplayComponent type="powders" label="Pulver" selectedItem={selectedPowder} onNavigateToComponent={onNavigateToComponent}/> </div> </div> <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md"> <h2 className="text-xl font-semibold mb-4">2. Ladedaten & Nutzung</h2> <div className="space-y-4"> <InputField name="powderCharge" label="Pulverladung (grain)" value={(calculatorInputs.powderCharge || '').replace('.', ',')} onChange={handleInputChange} /> <InputField name="caseCycles" label="Ladezyklen pro Hülse" value={calculatorInputs.caseCycles || ''} onChange={handleInputChange} /> <InputField name="batchSize" label="Kosten für X Patronen" value={calculatorInputs.batchSize || ''} onChange={handleInputChange} /> <InputField name="roundsPerTraining" label="Verbrauch pro Training" value={calculatorInputs.roundsPerTraining || ''} onChange={handleInputChange} /> <InputField name="trainingsPerYear" label="Trainings pro Jahr" value={calculatorInputs.trainingsPerYear || ''} onChange={handleInputChange} /> </div> </div> </div> <div className="lg:col-span-2 space-y-6"> <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md"> <h2 className="text-xl font-semibold mb-4">Kalkulation pro Patrone</h2> <div className="grid grid-cols-2 md:grid-cols-5 gap-4 text-center"> <StatCard title="Geschoss" value={formatCurrency(costs.bulletCost)} /> <StatCard title="Hülse" value={formatCurrency(costs.caseCost)} /> <StatCard title="Zünder" value={formatCurrency(costs.primerCost)} /> <StatCard title="Pulver" value={formatCurrency(costs.powderCost)} /> <div className="bg-blue-100 dark:bg-blue-900/50 p-4 rounded-lg shadow-inner col-span-2 md:col-span-1"> <p className="text-sm text-blue-600 dark:text-blue-300">Summe</p> <p className="text-2xl font-bold text-blue-800 dark:text-blue-200">{formatCurrency(costs.totalPerRound)}</p> </div> </div> <div className="mt-6 text-center"> <p className="text-lg font-semibold">Kosten für {calculatorInputs.batchSize} Stück: <span className="ml-2 text-2xl font-bold text-green-600 dark:text-green-400"> {formatCurrency(costs.totalPerRound * (parseInt(calculatorInputs.batchSize, 10) || 0))} </span> </p> </div> </div> <div className="p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md"> <h2 className="text-xl font-semibold mb-4">Jahresverbrauch & Gesamtkosten</h2> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> <StatCard title="Patronen / Jahr" value={consumption.annualRounds.toLocaleString('de-DE')} /> <StatCard title="Pulver / Jahr" value={consumption.annualPowderKg.toFixed(2)} unit="kg" /> <StatCard title="Trainings / Monat" value={(parseInt(calculatorInputs.trainingsPerYear, 10) / 12).toFixed(2)} /> <StatCard title="Patronen / Dose" value={selectedPowder && (parseFloat(calculatorInputs.powderCharge) > 0) ? Math.floor((parseFloat(selectedPowder.gewicht) || 0) * 1000 * 15.4324 / (parseFloat(calculatorInputs.powderCharge) || 1)).toLocaleString('de-DE') : 'N/A'} /> </div> <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4"> <StatCard title="Kosten pro Monat" value={formatCurrency(consumption.costPerMonth)} /> <StatCard title="Kosten pro Jahr" value={formatCurrency(consumption.costPerYear)} /> <StatCard title="Kosten in 5 Jahren" value={formatCurrency(consumption.costIn5Years)} /> </div> </div> </div> </div> </div> );
        };
        const ComponentManager = ({ collectionName, title, fields, items, onSaveNew, onUpdate, onDelete, onBatchAdd, onSelectForCalculator }) => {
            const [isFormVisible, setIsFormVisible] = useState(false); const [editingItem, setEditingItem] = useState(null); const [formData, setFormData] = useState({}); const [filters, setFilters] = useState({}); const [sortConfig, setSortConfig] = useState({ key: fields[0].name, direction: 'ascending' }); const [importMessage, setImportMessage] = useState(''); const fileInputRef = useRef(null);
            const handleFileImport = (event) => {
                const file = event.target.files[0]; if (!file) return;
                const reader = new FileReader();
                reader.onload = (e) => {
                    const content = e.target.result; const lines = content.split(/\r?\n/).filter(line => line.trim() && !line.startsWith(';'));
                    let newItems = []; let skippedCount = 0;
                    if (collectionName === 'bullets') { lines.forEach(line => { const parts = line.split(',').map(p => p.trim()); if (parts.length >= 3) { const nameParts = parts[2].split(' '); const hersteller = nameParts[0]; const bezeichnung = nameParts.slice(1).join(' '); const gewicht = parts[1]; const exists = items.some(item => item.hersteller === hersteller && item.bezeichnung === bezeichnung && item.gewicht === gewicht); if (!exists) { newItems.push({ hersteller, bezeichnung, gewicht, durchmesser: parts[0], anzahl: '100', preis: '0.00' }); } else { skippedCount++; } } });
                    } else if (collectionName === 'powders') { lines.forEach(line => { const name = line.replace(/"/g, '').trim(); if (name) { const nameParts = name.split(' '); const hersteller = nameParts[0]; const bezeichnung = nameParts.slice(1).join(' '); const exists = items.some(item => item.hersteller === hersteller && item.bezeichnung === bezeichnung); if (!exists) { newItems.push({ hersteller, bezeichnung, gewicht: '1.0', preis: '0.00' }); } else { skippedCount++; } } }); }
                    if (newItems.length > 0) { onBatchAdd(collectionName, newItems); }
                    setImportMessage(`${newItems.length} neue Einträge importiert. ${skippedCount} Duplikate übersprungen.`);
                    setTimeout(() => setImportMessage(''), 7000);
                };
                reader.readAsText(file); event.target.value = null;
            };
            const filteredAndSortedItems = useMemo(() => {
                let sortableItems = [...items];
                Object.entries(filters).forEach(([key, value]) => { if (value) { sortableItems = sortableItems.filter(item => item[key] && item[key].toString().toLowerCase().includes(value.toLowerCase())); } });
                if (sortConfig.key) {
                    sortableItems.sort((a, b) => {
                        const aValue = a[sortConfig.key], bValue = b[sortConfig.key]; const isNumeric = fields.find(f => f.name === sortConfig.key)?.type === 'number';
                        if (isNumeric) { const numA = parseFloat(aValue) || 0, numB = parseFloat(bValue) || 0; return sortConfig.direction === 'ascending' ? numA - numB : numB - numA; } else { const strA = (aValue || '').toString().toLowerCase(), strB = (bValue || '').toString().toLowerCase(); return sortConfig.direction === 'ascending' ? strA.localeCompare(strB) : strB.localeCompare(strA); }
                    });
                }
                return sortableItems;
            }, [items, filters, sortConfig, fields]);
            const requestSort = (key) => { let direction = 'ascending'; if (sortConfig.key === key && sortConfig.direction === 'ascending') { direction = 'descending'; } setSortConfig({ key, direction }); };
            const handleInputChange = (e) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); }; const handleFilterChange = (e) => { const { name, value } = e.target; setFilters(prev => ({ ...prev, [name]: value })); }; const resetForm = () => { setFormData({}); setEditingItem(null); setIsFormVisible(false); };
            const handleSave = (e) => { e.preventDefault(); if (editingItem) { onUpdate(collectionName, { ...editingItem, ...formData }); } else { onSaveNew(collectionName, formData); } resetForm(); }; const handleEdit = (item) => { setEditingItem(item); setFormData(item); setIsFormVisible(true); };
            return ( <div className="max-w-7xl mx-auto"> <div className="flex justify-between items-center mb-6"> <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">{title}</h1> <div className="flex space-x-2"> <input type="file" ref={fileInputRef} onChange={handleFileImport} accept={collectionName === 'bullets' ? '.bul' : '.pro'} style={{ display: 'none' }}/> {(collectionName === 'bullets' || collectionName === 'powders') && ( <button onClick={() => fileInputRef.current.click()} className="flex items-center px-4 py-2 bg-teal-600 text-white rounded-lg shadow hover:bg-teal-700 transition-colors"> <span className="mr-2 text-xl">📤</span> Import </button> )} <button onClick={() => { setIsFormVisible(true); setEditingItem(null); setFormData({}); }} className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg shadow hover:bg-blue-700 transition-colors"> <span className="mr-2 text-xl">➕</span> Neu </button> </div> </div> {importMessage && (<div className="mb-4 p-3 bg-green-100 border border-green-400 text-green-700 rounded-md dark:bg-green-900/50 dark:text-green-300 dark:border-green-700">{importMessage}</div>)} {isFormVisible && ( <div className="mb-6 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md"> <h2 className="text-xl font-semibold mb-4">{editingItem ? 'Eintrag bearbeiten' : 'Neuen Eintrag erstellen'}</h2> <form onSubmit={handleSave} className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4"> {fields.map(field => ( <div key={field.name}> <label className="block text-sm font-medium">{field.label}</label> <input type={field.type} name={field.name} value={formData[field.name] || ''} onChange={handleInputChange} required step={field.type === 'number' ? field.step || 'any' : undefined} className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-900 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"/> </div> ))} <div className="md:col-span-2 lg:col-span-3 flex justify-end space-x-3 mt-4"> <button type="button" onClick={resetForm} className="px-4 py-2 bg-gray-200 dark:bg-gray-600 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500">Abbrechen</button> <button type="submit" className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">Speichern</button> </div> </form> </div> )} <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden"> <div className="overflow-x-auto"> <table className="w-full text-sm text-left text-gray-500 dark:text-gray-400"> <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400"> <tr> {fields.map((field) => ( <th key={field.name} scope="col" className="px-6 py-3"> <button onClick={() => requestSort(field.name)} className="flex items-center space-x-1"><span>{field.label}</span><span>{sortConfig.key === field.name ? (sortConfig.direction === 'ascending' ? '▲' : '▼') : '↕️'}</span></button></th> ))} <th scope="col" className="px-6 py-3 text-right">Aktionen</th> </tr> </thead> <tbody> {filteredAndSortedItems.map(item => ( <tr key={item.id} className="bg-white dark:bg-gray-800 border-b dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600"> {fields.map(f => <td key={`${item.id}-${f.name}`} className="px-6 py-4">{item[f.name]}</td>)} <td className="px-6 py-4 text-right space-x-2"> <button onClick={() => onSelectForCalculator(item.id)} className="p-2 text-green-600 hover:bg-green-100 dark:hover:bg-gray-700 rounded-full" title="Für Kalkulator auswählen">⬆️</button> <button onClick={() => handleEdit(item)} className="p-2 text-blue-500 hover:bg-blue-100 dark:hover:bg-gray-700 rounded-full" title="Bearbeiten">✏️</button> <button onClick={() => onDelete(collectionName, item.id)} className="p-2 text-red-500 hover:bg-red-100 dark:hover:bg-gray-700 rounded-full" title="Löschen">🗑️</button> </td> </tr> ))} </tbody> </table> </div> </div> </div> );
        };
        const RecipeManager = ({ recipes, components, onSaveNew, onUpdate, onDelete, onLoadRecipe }) => {
            const [isFormVisible, setIsFormVisible] = useState(false); const [editingRecipe, setEditingRecipe] = useState(null); const [formData, setFormData] = useState({}); const [errorMessage, setErrorMessage] = useState('');
            const InputField = ({ name, label, value, onChange, type = 'text', required = false }) => ( <div> <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">{label}</label> <input type={type} name={name} value={value || ''} onChange={onChange} required={required} step="any" className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"/> </div> );
            const SelectComponent = ({ name, label, list, value, onChange }) => ( <div> <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">{label}</label> <select name={name} value={value || ''} onChange={onChange} required className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"> <option value="">-- Bitte wählen --</option> {list.map(item => (<option key={item.id} value={item.id}>{item.hersteller} {item.bezeichnung}</option>))} </select> </div> );
            const handleInputChange = (e) => { const { name, value } = e.target; setFormData(prev => ({ ...prev, [name]: value })); };
            const resetForm = () => { setFormData({}); setEditingRecipe(null); setIsFormVisible(false); setErrorMessage(''); };
            const handleSave = (e) => { e.preventDefault(); if (!formData.name || !formData.bulletId || !formData.caseId || !formData.primerId || !formData.powderId || !formData.powderCharge) { setErrorMessage('Bitte füllen Sie alle erforderlichen Felder aus.'); return; } if (editingRecipe) { onUpdate('recipes', { ...editingRecipe, ...formData }); } else { onSaveNew('recipes', formData); } resetForm(); };
            const handleEdit = (recipe) => { setEditingRecipe(recipe); setFormData(recipe); setIsFormVisible(true); };
            const getComponentName = (type, id) => { const list = components[type] || []; const component = list.find(c => c.id === id); return component ? `${component.hersteller} ${component.bezeichnung}` : 'Unbekannt'; };
            return ( <div className="max-w-7xl mx-auto"> <div className="flex justify-between items-center mb-6"> <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100">Ladedaten / Rezepte</h1> <button onClick={() => { resetForm(); setIsFormVisible(true); }} className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg shadow hover:bg-blue-700 transition-colors"> <span className="mr-2 text-xl">➕</span> Neues Rezept </button> </div> {isFormVisible && ( <div className="mb-6 p-6 bg-white dark:bg-gray-800 rounded-lg shadow-md"> <h2 className="text-xl font-semibold mb-4">{editingRecipe ? 'Rezept bearbeiten' : 'Neues Rezept erstellen'}</h2> <form onSubmit={handleSave} className="space-y-4"> {errorMessage && (<div className="p-3 bg-red-100 border border-red-400 text-red-700 rounded-md dark:bg-red-900/50 dark:border-red-700 dark:text-red-300">{errorMessage}</div>)} <InputField name="name" label="Name des Rezepts (z.B. Präzi .308)" value={formData.name} onChange={handleInputChange} required={true} /> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <SelectComponent name="bulletId" label="Geschoss" list={components.bullets} value={formData.bulletId} onChange={handleInputChange} /> <SelectComponent name="caseId" label="Hülse" list={components.cases} value={formData.caseId} onChange={handleInputChange} /> <SelectComponent name="primerId" label="Zünder" list={components.primers} value={formData.primerId} onChange={handleInputChange} /> <SelectComponent name="powderId" label="Pulver" list={components.powders} value={formData.powderId} onChange={handleInputChange} /> <InputField name="powderCharge" label="Pulverladung (grain)" type="number" value={formData.powderCharge} onChange={handleInputChange} required={true} /> <InputField name="oal" label="Patronenlänge OAL (mm)" type="number" value={formData.oal} onChange={handleInputChange} /> </div> <div> <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">Notizen</label> <textarea name="notes" value={formData.notes || ''} onChange={handleInputChange} placeholder="Testergebnisse, Besonderheiten etc." rows="4" className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"></textarea> </div> <div className="flex justify-end space-x-3 mt-4"> <button type="button" onClick={resetForm} className="px-4 py-2 bg-gray-200 dark:bg-gray-600 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-500">Abbrechen</button> <button type="submit" className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">Speichern</button> </div> </form> </div> )} <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {recipes.length > 0 ? recipes.map(recipe => ( <div key={recipe.id} className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-5 flex flex-col justify-between"> <div> <h3 className="font-bold text-lg text-blue-600 dark:text-blue-400 mb-3">{recipe.name}</h3> <ul className="text-sm space-y-1"> <li><strong>Geschoss:</strong> {getComponentName('bullets', recipe.bulletId)}</li> <li><strong>Hülse:</strong> {getComponentName('cases', recipe.caseId)}</li> <li><strong>Zünder:</strong> {getComponentName('primers', recipe.primerId)}</li> <li><strong>Pulver:</strong> {getComponentName('powders', recipe.powderId)}</li> <li><strong>Ladung:</strong> {recipe.powderCharge} gr</li> {recipe.oal && <li><strong>OAL:</strong> {recipe.oal} mm</li>} </ul> {recipe.notes && <p className="text-sm mt-3 p-2 bg-gray-100 dark:bg-gray-700 rounded-md whitespace-pre-wrap">{recipe.notes}</p>} </div> <div className="flex justify-end space-x-2 mt-4 pt-4 border-t border-gray-200 dark:border-gray-700"> <button onClick={() => onLoadRecipe(recipe)} className="p-2 text-green-600 hover:bg-green-100 dark:hover:bg-gray-700 rounded-full" title="In Kalkulator laden">⬆️</button> <button onClick={() => handleEdit(recipe)} className="p-2 text-blue-500 hover:bg-blue-100 dark:hover:bg-gray-700 rounded-full" title="Bearbeiten">✏️</button> <button onClick={() => onDelete('recipes', recipe.id)} className="p-2 text-red-500 hover:bg-red-100 dark:hover:bg-gray-700 rounded-full" title="Löschen">🗑️</button> </div> </div> )) : ( <div className="col-span-full text-center py-12"> <p className="text-gray-500 dark:text-gray-400">Noch keine Rezepte gespeichert.</p> <button onClick={() => setIsFormVisible(true)} className="mt-4 text-blue-600 dark:text-blue-400 hover:underline">Erstelle dein erstes Rezept</button> </div> )} </div> </div> );
        };
        const UnitConverter = () => {
            const [values, setValues] = useState({ grains: '158', grams: '10.24', mm: '71.12', inch: '2.80', ms: '850', fps: '2789', joules: '3698', ftlbs: '2727', bar: '4000', psi: '58015' });
            const InputField = ({ name, label, value, onChange, type = 'text' }) => ( <div> <label className="block text-sm font-medium text-gray-700 dark:text-gray-300">{label}</label> <input type={type} name={name} value={value || ''} onChange={onChange} min="0" step="any" className="mt-1 block w-full px-3 py-2 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm"/> </div> );
            const ConversionCard = ({ title, unit1, label1, unit2, label2, values, onChange }) => ( <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md"> <h2 className="text-xl font-semibold mb-4 text-gray-800 dark:text-gray-200">{title}</h2> <div className="grid grid-cols-2 gap-4 items-end"> <InputField name={unit1} label={label1} type="number" value={values[unit1]} onChange={onChange} /> <InputField name={unit2} label={label2} type="number" value={values[unit2]} onChange={onChange} /> </div> </div> );
            const handleConversion = (e) => {
                const { name, value } = e.target; const numValue = parseFloat(value) || 0; let newValues = { ...values, [name]: value };
                switch (name) {
                    case 'grains': newValues.grams = (numValue * 0.06479891).toFixed(2); break; case 'grams': newValues.grains = (numValue / 0.06479891).toFixed(2); break;
                    case 'mm': newValues.inch = (numValue / 25.4).toFixed(3); break; case 'inch': newValues.mm = (numValue * 25.4).toFixed(2); break;
                    case 'ms': newValues.fps = (numValue * 3.28084).toFixed(0); break; case 'fps': newValues.ms = (numValue / 3.28084).toFixed(0); break;
                    case 'joules': newValues.ftlbs = (numValue * 0.737562).toFixed(0); break; case 'ftlbs': newValues.joules = (numValue / 0.737562).toFixed(0); break;
                    case 'bar': newValues.psi = (numValue * 14.50377).toFixed(0); break; case 'psi': newValues.bar = (numValue / 14.50377).toFixed(0); break;
                }
                setValues(newValues);
            };
            return ( <div className="max-w-4xl mx-auto"> <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-6">Einheiten-Umrechner</h1> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <ConversionCard title="Gewicht" unit1="grains" label1="Grain (gr)" unit2="grams" label2="Gramm (g)" values={values} onChange={handleConversion} /> <ConversionCard title="Länge" unit1="inch" label1="Zoll (in)" unit2="mm" label2="Millimeter (mm)" values={values} onChange={handleConversion} /> <ConversionCard title="Geschwindigkeit" unit1="fps" label1="Fuß pro Sekunde (fps)" unit2="ms" label2="Meter pro Sekunde (m/s)" values={values} onChange={handleConversion} /> <ConversionCard title="Energie" unit1="ftlbs" label1="Foot-pounds (ft-lbf)" unit2="joules" label2="Joule (J)" values={values} onChange={handleConversion} /> <ConversionCard title="Druck" unit1="psi" label1="PSI" unit2="bar" label2="Bar" values={values} onChange={handleConversion} /> </div> </div> );
        };

        //============== HAUPT-APP ==============
        function App() {
            const [view, setView] = useState('calculator');
            const [isSidebarOpen, setIsSidebarOpen] = useState(true);
            const fileImportRef = useRef(null);
            const [isDarkMode, setIsDarkMode] = useState(false);
            const [appData, setAppData] = useState(() => { try { const savedData = localStorage.getItem('wiederladerAppData'); return savedData ? JSON.parse(savedData) : initialData; } catch (error) { console.error(error); return initialData; } });
            useEffect(() => { localStorage.setItem('wiederladerAppData', JSON.stringify(appData)); }, [appData]);
            useEffect(() => { document.documentElement.classList.toggle('dark', isDarkMode); }, [isDarkMode]);
            const handleUpdateAppData = (key, value) => setAppData(prev => ({ ...prev, [key]: value }));
            const handleUpdateItem = (collectionName, updatedItem) => handleUpdateAppData(collectionName, appData[collectionName].map(i => i.id === updatedItem.id ? updatedItem : i));
            const handleAddItem = (collectionName, newItemData) => { const newItem = { ...newItemData, id: `id-${Date.now()}` }; handleUpdateAppData(collectionName, [...appData[collectionName], newItem]); };
            const handleDeleteItem = (collectionName, itemId) => { if (window.confirm("Diesen Eintrag wirklich löschen?")) { handleUpdateAppData(collectionName, appData[collectionName].filter(i => i.id !== itemId)); } };
            const handleBatchAdd = (collectionName, newItems) => { const itemsWithIds = newItems.map(item => ({ ...item, id: `id-${Date.now()}-${Math.random()}` })); handleUpdateAppData(collectionName, [...appData[collectionName], ...itemsWithIds]); };
            const handleLoadRecipe = (recipe) => { handleUpdateAppData('calculatorSelection', { bullet: recipe.bulletId || '', case: recipe.caseId || '', primer: recipe.primerId || '', powder: recipe.powderId || '' }); handleUpdateAppData('calculatorInputs', { ...appData.calculatorInputs, powderCharge: recipe.powderCharge || '0' }); setView('calculator'); };
            const handleSelectForCalculator = (type, id) => { const newSelection = { ...appData.calculatorSelection, [type]: id }; handleUpdateAppData('calculatorSelection', newSelection); setView('calculator'); };
            const handleSaveDataToFile = () => { const jsonString = `data:text/json;charset=utf-8,${encodeURIComponent(JSON.stringify(appData, null, 2))}`; const link = document.createElement("a"); link.href = jsonString; link.download = "wiederlader-rechner-daten.json"; link.click(); };
            const handleLoadDataFromFile = (event) => {
                const file = event.target.files[0]; if (!file) return;
                const reader = new FileReader();
                reader.onload = (e) => { try { if (window.confirm("Achtung: Der Import überschreibt alle aktuellen Daten. Fortfahren?")) { setAppData(JSON.parse(e.target.result)); alert('Daten erfolgreich importiert!'); setView('calculator'); } } catch (error) { alert("Fehler: Die Datei konnte nicht gelesen werden."); } };
                reader.readAsText(file); event.target.value = null;
            };
            const renderView = () => {
                switch (view) {
                    case 'calculator': return <ReloadingCalculator appData={appData} onNavigateToComponent={setView} onInputsChange={(newInputs) => handleUpdateAppData('calculatorInputs', newInputs)} />;
                    case 'bullets': return <ComponentManager collectionName="bullets" title="Geschosse" fields={bulletFields} items={appData.bullets} onSaveNew={handleAddItem} onUpdate={handleUpdateItem} onDelete={handleDeleteItem} onBatchAdd={handleBatchAdd} onSelectForCalculator={(id) => handleSelectForCalculator('bullet', id)} />;
                    case 'cases': return <ComponentManager collectionName="cases" title="Hülsen" fields={caseFields} items={appData.cases} onSaveNew={handleAddItem} onUpdate={handleUpdateItem} onDelete={handleDeleteItem} onBatchAdd={handleBatchAdd} onSelectForCalculator={(id) => handleSelectForCalculator('case', id)} />;
                    case 'primers': return <ComponentManager collectionName="primers" title="Zünder" fields={primerFields} items={appData.primers} onSaveNew={handleAddItem} onUpdate={handleUpdateItem} onDelete={handleDeleteItem} onBatchAdd={handleBatchAdd} onSelectForCalculator={(id) => handleSelectForCalculator('primer', id)} />;
                    case 'powders': return <ComponentManager collectionName="powders" title="Pulver" fields={powderFields} items={appData.powders} onSaveNew={handleAddItem} onUpdate={handleUpdateItem} onDelete={handleDeleteItem} onBatchAdd={handleBatchAdd} onSelectForCalculator={(id) => handleSelectForCalculator('powder', id)} />;
                    case 'recipes': return <RecipeManager recipes={appData.recipes} components={{ bullets: appData.bullets, cases: appData.cases, primers: appData.primers, powders: appData.powders }} onSaveNew={handleAddItem} onUpdate={handleUpdateItem} onDelete={handleDeleteItem} onLoadRecipe={handleLoadRecipe} />;
                    case 'converter': return <UnitConverter />;
                    default: return <div className="text-red-500">Ansicht nicht gefunden</div>;
                }
            };
            return (
                <div className="flex h-screen bg-gray-100 dark:bg-gray-900 font-sans text-gray-900 dark:text-gray-100">
                    <aside className={`bg-white dark:bg-gray-800 transition-all duration-300 ${isSidebarOpen ? 'w-64' : 'w-20'} flex flex-col border-r dark:border-gray-700 flex-shrink-0`}>
                        <div className="flex items-center justify-between h-16 px-4 border-b dark:border-gray-700"> <span className={`font-bold text-xl text-blue-600 dark:text-blue-400 ${!isSidebarOpen ? 'hidden' : ''}`}>Wiederlader</span> <button onClick={() => setIsSidebarOpen(!isSidebarOpen)} className="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700"> <span className="text-xl">{isSidebarOpen ? 'ᐊ' : 'ᐅ'}</span> </button> </div>
                        <nav className="flex-1 p-4 space-y-2 overflow-y-auto">
                            <NavLink viewName="calculator" currentView={view} setView={setView} icon={'🧮'} text="Kalkulator" isSidebarOpen={isSidebarOpen} />
                            <NavLink viewName="recipes" currentView={view} setView={setView} icon={'💾'} text="Ladedaten" isSidebarOpen={isSidebarOpen} />
                            <div className="pt-4 mt-4 border-t border-gray-200 dark:border-gray-700">
                                <h3 className={`px-4 text-xs font-semibold tracking-wider text-gray-500 uppercase ${!isSidebarOpen ? 'text-center' : ''}`}>{!isSidebarOpen ? 'DB' : 'Komponenten'}</h3>
                                <div className="mt-2 space-y-2">
                                    <NavLink viewName="bullets" currentView={view} setView={setView} icon={'🎯'} text="Geschosse" isSidebarOpen={isSidebarOpen} />
                                    <NavLink viewName="cases" currentView={view} setView={setView} icon={'🔘'} text="Hülsen" isSidebarOpen={isSidebarOpen} />
                                    <NavLink viewName="primers" currentView={view} setView={setView} icon={'🔥'} text="Zünder" isSidebarOpen={isSidebarOpen} />
                                    <NavLink viewName="powders" currentView={view} setView={setView} icon={'⚛️'} text="Pulver" isSidebarOpen={isSidebarOpen} />
                                </div>
                            </div>
                            <div className="pt-4 mt-4 border-t border-gray-200 dark:border-gray-700"> <NavLink viewName="converter" currentView={view} setView={setView} icon={'➗'} text="Umrechner" isSidebarOpen={isSidebarOpen} /> </div>
                        </nav>
                        <div className="p-4 border-t dark:border-gray-700 space-y-2">
                            <input type="file" ref={fileImportRef} onChange={handleLoadDataFromFile} accept=".json" style={{display: 'none'}} />
                            <button onClick={() => fileImportRef.current.click()} className={`flex items-center w-full px-4 py-3 text-left transition-colors duration-200 rounded-lg text-green-600 hover:bg-green-100 dark:hover:bg-green-900/50`}> <span className="text-xl">☁️</span><span className={`ml-3 whitespace-nowrap ${!isSidebarOpen ? 'hidden' : ''}`}>Daten Laden</span> </button>
                            <button onClick={handleSaveDataToFile} className={`flex items-center w-full px-4 py-3 text-left transition-colors duration-200 rounded-lg text-blue-500 hover:bg-blue-100 dark:hover:bg-blue-900/50`}> <span className="text-xl">📥</span><span className={`ml-3 whitespace-nowrap ${!isSidebarOpen ? 'hidden' : ''}`}>Daten Speichern</span> </button>
                            <button onClick={() => setIsDarkMode(!isDarkMode)} className={`flex items-center w-full px-4 py-3 text-left transition-colors duration-200 rounded-lg text-yellow-500 hover:bg-yellow-100 dark:hover:bg-yellow-900/50`}> <span className="text-xl">{isDarkMode ? '☀️' : '🌙'}</span><span className={`ml-3 whitespace-nowrap ${!isSidebarOpen ? 'hidden' : ''}`}>{isDarkMode ? 'Heller Modus' : 'Dunkler Modus'}</span> </button>
                        </div>
                    </aside>
                    <main className="flex-1 p-4 sm:p-6 lg:p-8 overflow-y-auto"> {renderView()} </main>
                </div>
            );
        }

        //============== ANWENDUNG STARTEN ==============
        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(<App />);

    </script>
</body>
</html>
